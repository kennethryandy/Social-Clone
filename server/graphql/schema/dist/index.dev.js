"use strict";

var _require = require('graphql'),
    buildSchema = _require.buildSchema;

module.exports = buildSchema("\n  type Notification {\n    recipient: String!\n    sender: String!\n    read: Boolean!\n    type: String!\n    postId: ID!\n  }\n\n  type User {\n    _id: ID!\n    username: String!\n    email: String!\n    password: String\n    posts: [Post!]\n    notifications: [Notification!]\n    imageUrl: String\n    bio: String\n    location: String\n    status: String\n  }\n\n  type EditUserDetails {\n    user: User!\n  }\n\n  type AuthUser {\n    userId: ID!\n    token: String!\n    tokenExp: Int!\n    username: String!\n  }\n\n  type Post {\n    _id: ID!\n    content: String!\n    creator: User!\n    comments: [Comment!]\n    likes: [Like!]\n    commentCount: Int\n    likeCount: Int\n    createdAt: String!\n    updatedAt: String!\n  }\n\n  type Comment {\n    _id: ID!\n    content: String\n    username: String\n    imageUrl: String\n    userId: ID\n    postId: ID\n    createdAt: String\n    updatedAt: String\n  }\n\n  type Like {\n    _id: ID!\n    username: String!\n    user: ID!\n    post: ID!\n  }\n\n  input UserInput {\n    username: String!\n    email: String!\n    password: String!\n  }\n  \n  input CommentInput {\n    postId: ID!\n    content: String!\n  }\n\n  input UserDetails {\n    bio: String\n    location: String\n    status: String\n  }\n\n  \n  type RootQuery {\n    userPost:[Post!]\n    posts: [Post!]\n    comments: [Comment!]\n    users: [User!]!\n    login(email: String!, password: String!): AuthUser!\n  }\n\n  type RootMutation {\n    signup(userInput: UserInput): AuthUser!\n    editUserDetails(userDetails: UserDetails): User\n    createPost(content: String!): Post\n    addComment(commentInput: CommentInput): Comment!\n    likePost(postId: ID!): Post\n    unlikePost(postId: ID!): Post!\n  }\n\n  schema {\n    query: RootQuery\n    mutation: RootMutation\n  }\n");